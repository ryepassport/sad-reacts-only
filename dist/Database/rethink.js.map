{
  "version": 3,
  "sources": [
    "rethink.js"
  ],
  "names": [
    "Rethink",
    "opts",
    "connection",
    "r",
    "options",
    "host",
    "port",
    "db",
    "user",
    "password",
    "timeout",
    "ssl",
    "connect",
    "database",
    "use",
    "closure",
    "run",
    "coerceTo",
    "results"
  ],
  "mappings": ";;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEqBA,O;AACnB,qBAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACrB,gCAAQ,IAAR,EAAcC,UAAd,GAA2B,IAA3B;AACA,gCAAQ,IAAR,EAAcC,CAAd;AACA,gCAAQ,IAAR,EAAcC,OAAd,GAAwB;AACtBC,YAAMJ,KAAKI,IAAL,IAAa,WADG;AAEtBC,YAAML,KAAKK,IAAL,IAAa,KAFG;AAGtBC,UAAIN,KAAKM,EAAL,IAAW,MAHO;AAItBC,YAAMP,KAAKO,IAAL,IAAa,OAJG;AAKtBC,gBAAUR,KAAKQ,QAAL,IAAiB,EALL;AAMtBC,eAAST,KAAKS,OAAL,IAAgB,EANH;AAOtBC,WAAKV,KAAKU,GAAL,IAAY;AAPK,KAAxB;AASD;;;;2BAEM;AAAA,6BACoD,4BAAQ,IAAR,EAAcP,OADlE;AAAA,UACGC,IADH,oBACGA,IADH;AAAA,UACSC,IADT,oBACSA,IADT;AAAA,UACeC,EADf,oBACeA,EADf;AAAA,UACmBC,IADnB,oBACmBA,IADnB;AAAA,UACyBC,QADzB,oBACyBA,QADzB;AAAA,UACmCC,OADnC,oBACmCA,OADnC;AAAA,UAC4CC,GAD5C,oBAC4CA,GAD5C;;;AAGL,kCAAQ,IAAR,EAAcT,UAAd,GAA2B,4BAAQ,IAAR,EAAcC,CAAd,CAAgBS,OAAhB,CAAwB;AACjDP,kBADiD;AAEjDC,kBAFiD;AAGjDC,cAHiD;AAIjDC,kBAJiD;AAKjDC,0BALiD;AAMjDC,wBANiD;AAOjDC;AAPiD,OAAxB,CAA3B;;AAUA,aAAO,IAAP;AACD;;;;0FAEcE,Q;;;;;;;uBACY,4BAAQ,IAAR,EAAcX,U;;;AAAjCA,0B;;;AAENA,2BAAWY,GAAX,CAAeD,QAAf;;;;;;;;;;;;;;;;;;;4FAGYE,O;;;;;+BACCA,QAAQ,4BAAQ,IAAR,EAAcZ,CAAtB,C;;uBACA,4BAAQ,IAAR,EAAcD,U;;;;;oCAAxBc,G;;;;;;;;;;;;;;;;;;;;;;4FAGOD,O;;;;;;+BACYA,QAAQ,4BAAQ,IAAR,EAAcZ,CAAtB,EACnBc,QADmB,CACV,OADU,C;;uBAET,4BAAQ,IAAR,EAAcf,U;;;;;oCAAxBc,G;;;AAFGE,uB;kDAICA,O;;;;;;;;;;;;;;;;;;;;;kBA/CUlB,O",
  "file": "rethink.js",
  "sourceRoot": "../../src/Database",
  "sourcesContent": [
    "import r from 'rethinkdb'\nimport Private from 'private-props'\n\nexport default class Rethink {\n  constructor(opts = {}) {\n    Private(this).connection = null\n    Private(this).r = r\n    Private(this).options = {\n      host: opts.host || '127.0.0.1',\n      port: opts.port || 28015,\n      db: opts.db || 'test',\n      user: opts.user || 'admin',\n      password: opts.password || '',\n      timeout: opts.timeout || 20,\n      ssl: opts.ssl || null\n    }\n  }\n\n  open() {\n    const { host, port, db, user, password, timeout, ssl } = Private(this).options\n\n    Private(this).connection = Private(this).r.connect({\n      host,\n      port,\n      db,\n      user,\n      password,\n      timeout,\n      ssl\n    })\n\n    return this\n  }\n\n  async changeDb(database) {\n    const connection = await Private(this).connection\n\n    connection.use(database)\n  }\n\n  async console(closure) {\n    return await closure(Private(this).r)\n      .run(await Private(this).connection)\n  }\n\n  async query(closure) {\n    const results = await closure(Private(this).r)\n      .coerceTo('array')\n      .run(await Private(this).connection)\n\n    return results\n  }\n}\n"
  ]
}
