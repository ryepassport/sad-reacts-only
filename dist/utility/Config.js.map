{
  "version": 3,
  "sources": [
    "Config.js"
  ],
  "names": [
    "Config",
    "env",
    "configPath",
    "Error",
    "instance",
    "undefined",
    "configs",
    "configPaths",
    "Array",
    "isArray",
    "loadFromFileBulk",
    "dir",
    "forEach",
    "fileName",
    "includes",
    "config",
    "require",
    "sep",
    "configKey",
    "split",
    "paths",
    "path",
    "loadFromFile",
    "key",
    "hasOwnProperty",
    "configName",
    "value",
    "push"
  ],
  "mappings": ";;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,M;AACnB,kBAAYC,GAAZ,EAAiBC,UAAjB,EAA6B;AAAA;;AAC3B,QAAI,CAACD,GAAL,EAAU;AACR,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,SAAKC,QAAL,GAAgBC,SAAhB;AACA,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKK,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmBL,aAAcM,MAAMC,OAAN,CAAcP,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD,GAAuE,EAA1F;;AAEA;AACA,SAAKQ,gBAAL,CAAsB,KAAKH,WAA3B;AACD;;AAEC;;;;;;;;;iCAKWI,G,EAAK;AAAA;;AAChB,UAAI,CAAC,yBAAaA,GAAb,CAAL,EACE;AAAC,cAAM,IAAIR,KAAJ,CAAU,mCAAV,CAAN;AAAqD;;AAExD,iCAAeQ,GAAf,EAAoBC,OAApB,CAA4B,oBAAY;AACtC,YAAIC,YAAYA,SAASC,QAAT,CAAkB,KAAlB,CAAhB,EAA0C;AACxC,cAAIC,SAASC,QAAQL,MAAM,eAAKM,GAAX,GAAiBJ,QAAzB,EAAmC,MAAKZ,GAAxC,CAAb;AAAA,cACEiB,YAAYL,SAASM,KAAT,CAAe,GAAf,EAAoB,CAApB,CADd;;AAGA,gBAAKb,OAAL,CAAaY,SAAb,IAA0BH,MAA1B;AACD;AACF,OAPD;;AASA,aAAO,IAAP;AACD;;AAED;;;;;;;;qCAKiBK,K,EAAO;AAAA;;AACtB,UAAIA,KAAJ,EAAW;AACT,YAAIZ,MAAMC,OAAN,CAAcW,KAAd,CAAJ,EACE;AAACA,gBAAMR,OAAN,CAAc;AAAA,mBAAQS,OAAO,OAAKC,YAAL,CAAkBD,IAAlB,CAAP,GAAiC,KAAzC;AAAA,WAAd;AAA8D;AAClE;;AAED,aAAO,IAAP;AACD;;AAED;;;;;;;;wBAKIE,G,EAAK;AACP,aAAO,KAAKjB,OAAL,CAAakB,cAAb,CAA4BD,GAA5B,CAAP;AACD;;AAED;;;;;;;;wBAKIE,U,EAAY;AACd,aAAOA,aACH,KAAKnB,OAAL,CAAamB,UAAb,CADG,GAEH,KAAKnB,OAFT;AAGD;;AAED;;;;;;;;;wBAMImB,U,EAAYC,K,EAAO;AACrB,WAAKpB,OAAL,CAAamB,UAAb,IAA2BC,KAA3B;;AAEA,aAAO,IAAP;AACD;;AAED;;;;;;;+BAIW;AACT,aAAO,KAAKnB,WAAZ;AACD;;AAED;;;;;;;;6BAKSc,I,EAAM;AACb,WAAKd,WAAL,CAAiBoB,IAAjB,CAAsBN,IAAtB;;AAEA,WAAKC,YAAL,CAAkBD,IAAlB;;AAEA,aAAO,IAAP;AACD;;AAED;;;;;;;+BAIkB;AAChB,UAAI,CAAC,KAAKjB,QAAV,EACE;AAAC,aAAKA,QAAL,GAAgB,IAAI,IAAJ,EAAhB;AAA2B;;AAE9B,aAAO,KAAKA,QAAZ;AACD;;;;;;kBAhHkBJ,M",
  "file": "Config.js",
  "sourceRoot": "../../src/utility",
  "sourcesContent": [
    "import path from 'path'\nimport { is_directory, read_directory } from './index'\n\nexport default class Config {\n  constructor(env, configPath) {\n    if (!env) {\n      throw new Error('No env function passed.')\n    }\n\n    this.instance = undefined\n    this.env = env\n    this.configs = {}\n    this.configPaths = configPath ? (Array.isArray(configPath) ? configPath : [configPath]) : []\n\n    /** initially load from file if there's any */\n    this.loadFromFileBulk(this.configPaths)\n  }\n\n    /**\n     * Initialize configuration files, save all data from config path into our object\n     * @param {String} dir directory to search for configuration files\n     * @return this\n     */\n  loadFromFile(dir) {\n    if (!is_directory(dir))\n      {throw new Error('Valid directory path is expected.')}\n\n    read_directory(dir).forEach(fileName => {\n      if (fileName && fileName.includes('.js')) {\n        let config = require(dir + path.sep + fileName)(this.env),\n          configKey = fileName.split('.')[0]\n\n        this.configs[configKey] = config\n      }\n    })\n\n    return this\n  }\n\n  /**\n     * Initialize configuration files, save all data from config path into our object (bulked)\n     * @param {Array} path directory to search for configuration files\n     * @return this\n     */\n  loadFromFileBulk(paths) {\n    if (paths) {\n      if (Array.isArray(paths))\n        {paths.forEach(path => path ? this.loadFromFile(path) : false)}\n    }\n\n    return this\n  }\n\n  /**\n     * Check the existence of the configuration\n     * @param  {String}  key config key\n     * @return {Boolean} key existed?\n     */\n  has(key) {\n    return this.configs.hasOwnProperty(key)\n  }\n\n  /**\n     * Return specified configuration\n     * @param {String} configName configuration key\n     * @return Private.configs[configName]\n     */\n  get(configName) {\n    return configName\n      ? this.configs[configName]\n      : this.configs\n  }\n\n  /**\n     * Set data into our configuration object\n     * @param {String} configName configuration key\n     * @param {Mixed} value configuration value\n     * @return this\n     */\n  set(configName, value) {\n    this.configs[configName] = value\n\n    return this\n  }\n\n  /**\n     * Return where configuration files are located\n     * @return Private.configPath\n     */\n  getPaths() {\n    return this.configPaths\n  }\n\n  /**\n     * Set where configuration files are located\n     * @param {String} data location of config files\n     * @return this\n     */\n  pushPath(path) {\n    this.configPaths.push(path)\n\n    this.loadFromFile(path)\n\n    return this\n  }\n\n  /**\n     * Our good ol' friend singleton\n     * @return self\n     */\n  static instance() {\n    if (!this.instance)\n      {this.instance = new this()}\n\n    return this.instance\n  }\n}\n"
  ]
}
