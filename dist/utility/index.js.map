{
  "version": 3,
  "sources": [
    "index.js"
  ],
  "names": [
    "env",
    "config",
    "key",
    "value",
    "process",
    "load",
    "dir",
    "instantiate",
    "is_directory",
    "is_file",
    "Error",
    "loaded",
    "includes",
    "obj",
    "require",
    "get_filename",
    "files",
    "read_directory",
    "forEach",
    "sep",
    "file",
    "split",
    "exists",
    "existsSync",
    "remove",
    "path",
    "unlinkSync",
    "rename",
    "target",
    "new_alias",
    "renameSync",
    "statSync",
    "isFile",
    "base_path",
    "resolve",
    "cwd",
    "isDirectory",
    "length",
    "readdirSync",
    "Config"
  ],
  "mappings": "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",
  "file": "index.js",
  "sourceRoot": "../../src/utility",
  "sourcesContent": [
    "import dotenv from 'dotenv'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport Config from './Config'\n\nconst env = () => {\n\tdotenv.config()\n\n\treturn (key, value) => {\n\t\tprocess.env[key] = process.env[key] ? process.env[key] : value\n\n\t\treturn process.env[key]\n\t}\t\n}\n\nconst load = (dir, instantiate = true) => {\n\tif(!is_directory(dir) && !is_file(dir))\n\t    throw new Error(`${dir} is not a valid directory/file.`)\n\n\tconst loaded = {}\n\n\tif(is_file(dir)) {\n\t    if(dir.includes('.js')) {\n\t        let obj = instantiate ? new (require(dir)) : require(dir),\n\t            key = get_filename(dir)\n\n\t        loaded[key] = obj\n\t    }\n\t} else {\n\t    let files = read_directory(dir)\n\t    \n\t    files.forEach(file => {\n\t        if(is_file(dir + path.sep + file) && file.includes('.js')) {\n\t            let obj = instantiate ? new (require(dir + path.sep + file)) : require(dir + path.sep + file),\n\t            key = file.split('.')[0]\n\n\t            loaded[key] = obj\n\t        }\n\t    })   \n\t}\n\n\treturn loaded\n}\n\nconst exists = (dir) => fs.existsSync(dir)\n\nconst remove = (path) => fs.unlinkSync(path)\n\nconst rename = (target, new_alias) => fs.renameSync(target, new_alias)\n\nconst is_file = (dir) => exists(dir) \n\t? fs.statSync(dir).isFile() \n\t: false\n\nconst base_path = () => path.resolve(process.cwd())\n\nconst is_directory = (dir) => exists(dir) \n\t? fs.statSync(dir).isDirectory() \n\t: false\n\nconst get_filename = (dir) => dir.split(path.sep)[\n\t\tdir.split(path.sep).length - 1\n\t].split('.')[0]\n\nconst read_directory = (dir) => fs.readdirSync(dir)\n\n\nexport {\n\t/**\n\t * Checks whether the argument given exists as a path\n\t * @param {String} dir path to be checked\n\t * @return {Boolean} (true/false)\n\t */\n\texists,\n\n\t/**\n\t * Read the given path\n\t * @param {String} dir path to be scanned for files\n\t * @return fs.readdirSync\n\t */\n\tread_directory,\n\n\t/**\n\t * Checks whether the argument given is a valid file\n\t * @param {String} dir path to be checked\n\t * @return {Boolean} (true/false)\n\t */\n\tis_file,\n\n\t/**\n\t * Checks whether the argument given is a valid path\n\t * @param {String} dir path to be checked\n\t * @return {Boolean} (true/false)\n\t */\n\tis_directory,\n\n\t/**\n\t * returns the exact file name without the file extension from given directory\n\t * @param  {String} dir path\n\t * @return {String} cleaned file name\n\t */\n\tget_filename,\n\n\t/**\n\t* Check if key existed from environment variable, otherwise use\n\t* the value passed as second argument of this function\n\t*\n\t* @param {string} key key you are trying to access from env variable\n\t* @param {mixed} value alternative value in case key doesn't exist\n\t* @return {mixed} either value from env[key] or second argument value\n\t*/\n\tenv,\n\n\t/**\n\t * Removes file/directory\n\t * @param {String} path path to be removed\n\t * @return {Boolean} fs.unlinkSync\n\t */\n\tremove,\n\n\t/**\n\t * Change the name of a file/directory\n\t * @param {String} target target file or directory\n\t * @param {String} new_alias new name for the file or directory\n\t * @return fs.renameSync \n\t */\n\trename,\n\n\t/**\n\t * Returns the current working directory\n\t * @return {String} current working directory\n\t */\n \tbase_path,\n\n\t/**\n\t * require file but with the option to instantiate it\n\t * @param  {[type]}  dir         [description]\n\t * @param  {Boolean} instantiate [description]\n\t * @return {[type]}              [description]\n\t */\n\tload,\n\n\t/**\n\t * @see /src/utility/Config\n\t */\n\tConfig\n}"
  ]
}
